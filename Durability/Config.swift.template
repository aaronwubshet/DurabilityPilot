import Foundation
import HealthKit

// This is a template file. Create your actual Config.swift file based on this template.
// Make sure to include the date of birth and biological sex types in healthKitReadTypes.

struct Config {
    // Supabase configuration
    static let supabaseURL = URL(string: "YOUR_SUPABASE_URL")!
    static let supabaseAnonKey = "YOUR_SUPABASE_ANON_KEY"
    
    // App version
    static let appVersion = "1.0.0"
    
    // Storage bucket names
    static let assessmentVideosBucket = "assessment-videos"
    static let trainingPlanImagesBucket = "training-plan-images"
    
    // HealthKit configuration - CRITICAL FOR DATE OF BIRTH AND SEX
    static let healthKitReadTypes: Set<HKObjectType> = {
        var types: Set<HKObjectType> = []
        
        // Basic health data
        if let stepCount = HKQuantityType.quantityType(forIdentifier: .stepCount) {
            types.insert(stepCount)
        }
        if let activeEnergy = HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned) {
            types.insert(activeEnergy)
        }
        if let heartRate = HKQuantityType.quantityType(forIdentifier: .heartRate) {
            types.insert(heartRate)
        }
        if let weight = HKQuantityType.quantityType(forIdentifier: .bodyMass) {
            types.insert(weight)
        }
        if let height = HKQuantityType.quantityType(forIdentifier: .height) {
            types.insert(height)
        }
        
        // CRITICAL: Date of birth and biological sex types
        if let dateOfBirth = HKObjectType.characteristicType(forIdentifier: .dateOfBirth) {
            types.insert(dateOfBirth)
        }
        if let biologicalSex = HKObjectType.characteristicType(forIdentifier: .biologicalSex) {
            types.insert(biologicalSex)
        }
        
        return types
    }()
    
    static let healthKitWriteTypes: Set<HKSampleType> = {
        var types: Set<HKSampleType> = []
        
        if let stepCount = HKQuantityType.quantityType(forIdentifier: .stepCount) {
            types.insert(stepCount)
        }
        if let activeEnergy = HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned) {
            types.insert(activeEnergy)
        }
        
        return types
    }()
    
    // Assessment configuration
    static let maxAssessmentDuration: TimeInterval = 60 // seconds
}
